// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// getPeople mocks base method
func (m *MockStore) getPeople() ([]Person, error) {
	ret := m.ctrl.Call(m, "getPeople")
	ret0, _ := ret[0].([]Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getPeople indicates an expected call of getPeople
func (mr *MockStoreMockRecorder) getPeople() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPeople", reflect.TypeOf((*MockStore)(nil).getPeople))
}

// getPerson mocks base method
func (m *MockStore) getPerson(id int) (Person, error) {
	ret := m.ctrl.Call(m, "getPerson", id)
	ret0, _ := ret[0].(Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getPerson indicates an expected call of getPerson
func (mr *MockStoreMockRecorder) getPerson(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPerson", reflect.TypeOf((*MockStore)(nil).getPerson), id)
}

// createPerson mocks base method
func (m *MockStore) createPerson(p Person) error {
	ret := m.ctrl.Call(m, "createPerson", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// createPerson indicates an expected call of createPerson
func (mr *MockStoreMockRecorder) createPerson(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createPerson", reflect.TypeOf((*MockStore)(nil).createPerson), p)
}

// updatePerson mocks base method
func (m *MockStore) updatePerson(p Person) error {
	ret := m.ctrl.Call(m, "updatePerson", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// updatePerson indicates an expected call of updatePerson
func (mr *MockStoreMockRecorder) updatePerson(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePerson", reflect.TypeOf((*MockStore)(nil).updatePerson), p)
}

// deletePerson mocks base method
func (m *MockStore) deletePerson(id int) error {
	ret := m.ctrl.Call(m, "deletePerson", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deletePerson indicates an expected call of deletePerson
func (mr *MockStoreMockRecorder) deletePerson(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deletePerson", reflect.TypeOf((*MockStore)(nil).deletePerson), id)
}
