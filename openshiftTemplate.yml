--- 
apiVersion: v1
kind: Template

labels: 
  application: go-app
  createdBy: "PascalKistler"

metadata: 
  annotations: 
    description: "Application template for simple phonebook application in Go with REST API using postgresql as backend"
    iconClass: icon-golang
  name: go-app


objects: 
  - apiVersion: v1
    kind: ImageStream
    metadata: 
      name: "${APPLICATION_NAME}"
    spec: 
      dockerImageRepository: ""
      tags: 
        - name: latest


  - apiVersion: v1
    kind: BuildConfig
    metadata: 
      name: "${APPLICATION_NAME}"
    spec: 
      output: 
        to: 
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
      source: 
        git: 
          ref: "${GIT_REF}"
          uri: "${GIT_URI}"
        type: Git
      strategy: 
        sourceStrategy: 
          env:
            - name: IMPORT_URL
              value: "${GIT_IMPORT_URI}"
          from:
            kind: DockerImage
            name: 'centos/go-toolset-7-centos7:latest'
          type: Source
      triggers: 
        - type: ImageChange
          imageChange: {}
        - type: "ConfigChange"


  - apiVersion: v1
    kind: DeploymentConfig
    metadata: 
      name: "${APPLICATION_NAME}-postgresql"
    spec: 
      replicas: 1
      selector: 
        deploymentConfig: "${APPLICATION_NAME}-postgresql"
      strategy: 
        type: Recreate
      template: 
        metadata: 
          labels: 
            deploymentConfig: "${APPLICATION_NAME}-postgresql"
          name: "${APPLICATION_NAME}-postgresql"
        spec: 
          containers: 
            - env: 
                - name: POSTGRESQL_USER
                  value: "${POSTGRESQL_USER}"
                - name: POSTGRESQL_PASSWORD
                  value: "${POSTGRESQL_PASSWORD}"
                - name: POSTGRESQL_DATABASE
                  value: "${POSTGRESQL_DATABASE}"
                - name: POSTGRESQL_ADMIN_PASSWORD
                  value: "${POSTGRESQL_ADMIN_PASSWORD}"
              image: centos/postgresql-96-centos7
              imagePullPolicy: IfNotPresent
              name: "${APPLICATION_NAME}-postgresql"
              ports: 
                - containerPort: 5432
                  protocol: TCP
              resources: {}
              securityContext: 
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts: 
                - mountPath: /var/lib/pgsql/data
                  name: "${APPLICATION_NAME}-postgresql-data"
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes: 
            - name: "${APPLICATION_NAME}-postgresql-data"
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}-postgresql-claim"
      triggers: 
        - type: ConfigChange


  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: '${APPLICATION_NAME}-postgresql-claim'
      labels: {application: '${APPLICATION_NAME}'}
    spec:
      accessModes: [ReadWriteOnce]
      resources: {requests: {storage: '${VOLUME_CAPACITY}'}}


  - apiVersion: v1
    kind: DeploymentConfig
    metadata: 
      labels: 
        deploymentConfig: "${APPLICATION_NAME}"
      name: "${APPLICATION_NAME}"
    spec: 
      replicas: 3
      selector: 
        deploymentConfig: "${APPLICATION_NAME}"
      strategy: 
        type: Rolling
      template: 
        metadata: 
          labels: 
            deploymentConfig: "${APPLICATION_NAME}"
        spec: 
          containers: 
            - env:
                - name: DB_HOST
                  value: postgresql
                - name: DB_USER
                  value: "${POSTGRESQL_USER}"
                - name: DB_PASSWORD
                  value: "${POSTGRESQL_PASSWORD}"
                - name: DB_NAME
                  value: "${POSTGRESQL_DATABASE}"
              image: "${APPLICATION_NAME}"
              imagePullPolicy: Always
              livenessProbe: 
                httpGet: 
                  path: /people
                  port: 8080
                initialDelaySeconds: 30
                timeoutSeconds: 3
              name: "${APPLICATION_NAME}"
              ports: 
                - containerPort: 8080
                  name: "${APPLICATION_NAME}-http"
                  protocol: TCP
              readinessProbe: 
                httpGet: 
                  path: /people
                  port: 8080
                initialDelaySeconds: 5
                timeoutSeconds: 3
              resources: {}
              securityContext: 
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
          dnsPolicy: ClusterFirst
          restartPolicy: Always
      triggers: 
        - imageChangeParams: 
            automatic: true
            containerNames: 
              - "${APPLICATION_NAME}"
            from: 
              kind: ImageStreamTag
              name: "${APPLICATION_NAME}:latest"
          type: ImageChange
        - type: ConfigChange


  - apiVersion: v1
    kind: Route
    metadata: 
      annotations: 
        description: "Route for application's http service"
      name: "${APPLICATION_NAME}"
    spec: 
      host: "${APPLICATION_HOSTNAME}"
      to: 
        kind: Service
        name: "${APPLICATION_NAME}"


  - apiVersion: v1
    kind: Service
    metadata: 
      name: postgresql
    spec: 
      ports: 
        - port: 5432
          targetPort: 5432
      selector: 
        deploymentConfig: "${APPLICATION_NAME}-postgresql"


  - apiVersion: v1
    kind: Service
    metadata: 
      annotations: 
        description: "The web server's http port"
      name: "${APPLICATION_NAME}"
    spec: 
      ports: 
        - port: 8080
          protocol: TCP
          targetPort: 8080
      selector: 
        deploymentConfig: "${APPLICATION_NAME}"



parameters: 
  - description: "The name for the application."
    name: APPLICATION_NAME
    value: go-app

  - description: "Custom hostname for service routes.  Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>"
    name: APPLICATION_HOSTNAME

  - description: "Git source URI for application"
    name: GIT_URI
    value: "https://github.com/scriptcoffee/go-rest-api"

  - description: "Git source URL for go IMPORT_URL env"
    name: GIT_IMPORT_URI
    value: "github.com/scriptcoffee/go-rest-api"

  - description: "Git branch/tag reference"
    name: GIT_REF
    value: master

  - description: "VolumeClaim capacity"
    name: VOLUME_CAPACITY
    value: 20Gi

  - description: "Database name"
    name: POSTGRESQL_DATABASE
    value: root

  - description: "Database user name"
    from: "user[a-zA-Z0-9]{3}"
    generate: expression
    name: POSTGRESQL_USER

  - description: "Database user password"
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: POSTGRESQL_PASSWORD

  - description: "Database admin password"
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: POSTGRESQL_ADMIN_PASSWORD

  - description: "Github trigger secret"
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: GITHUB_TRIGGER_SECRET

  - description: "Generic build trigger secret"
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: GENERIC_TRIGGER_SECRET

